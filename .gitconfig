[core]
  excludesfile = ~/.gitignore
  editor = nvim
  ignorecase = false
  pager = delta
  # Make `git rebase` safer on macOS.
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Speed up commands involving untracked files such as `git status`.
  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

[init]
  defaultBranch = main

[include]
  path = ~/.config/delta/delta-themes.gitconfig


[color]
  status = auto
  diff = auto
  branch = auto
  interactive = auto
  grep = auto
  ui = auto

[user]
  name = Abdurrahman Alp KÃ¶ken
  email = abdurrahman@akoken.com

[commit]
  template = ~/.gitmessage.txt

[pull]
  rebase = true

[rebase]
  autoStash = true

[fetch]
  prune = true

[push]
  autoSetupRemote = true

[hub]
  protocol = https

[github]
  user = akoken

[diff]
  colorMoved = default
  navigate = true  # use n and N to move between diff sections
  renames = copies # Detect copies as well as renames.

[delta]
  dark = true
  true-color = always
  side-by-side = true
  line-numbers = true
  features = gruvbox-dark

[delta "decorations"]
  commit-decoration-style = bold yellow box ul
  file-style = bold yellow ul

[interactive]
  diffFilter = delta --color-only

[merge]
    conflictstyle = zdiff3

[mergetool "nvimdiff"]
  cmd = nvim -d \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
  trustExitCode = true

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  required = true
  process = git-lfs filter-process

[rerere]
  enabled = true

[alias]

# Show the working tree status
s = status

# status of commit
st = status -sb

# add, commit, stage your changes
acm = !git add . && git commit -m

# add, commit, stage, and push changes to origin
acmp = "!f() { git acm \"$@\" && git p; }; f"

# commit with message
cm = commit -m

# get branch
bl = branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate

# delete a branch only if it has been merged
bd = branch -d

# force delete a branch
bDf = branch -D

# checkout existing branch
co = checkout

# checkout a new not yet existing branch
cob = checkout -b

# checkout existing branch
sw = switch

# checkout a new not yet existing branch
swc = switch -c

# push changes to a remote
p = push

# push changes to a remote force with lease
pf = push --force-with-lease

# fetch from repo and prune any remote-tracking refs that no longer exist on remote
f = fetch -p

# discard changes
res = "!f(){ git reset --hard; git clean -fdx; if [ -d ".git/rebase-apply" ] || [ -d ".git/rebase-merge" ]; then git rebase --abort; fi; }; f"

# add worktree
wta = worktree add

# list worktree
wtl = worktree list

# remove worktree
wtr = worktree remove

# pretty log
plog = !git log --pretty=format:\"%C(magenta)%h%Creset -%C(red)%d%Creset %s %C(dim green)(%cr) [%an]\" --abbrev-commit -30

clsm = !git branch --merged | %{$_.trim()}  | ?{$_ -notmatch 'main' -and $_ -notmatch 'develop'} | %{git branch -d $_.trim()}

glog = !git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

